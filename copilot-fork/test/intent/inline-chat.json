[
  {
    "Location": "inline",
    "Request": "create unittests for this method, using pytest",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "/expain what is \"tget = any\"",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "explain this code block to me",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "get the name of the computer",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "invalid hooks call in this file",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "call timedelta with timestr",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "hey",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "create a basic class called textutilities",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "add unit test for reverse-words-in-a-string.go, use assert",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "check this api",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "summarize as 1 or 2 points",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "when are how m_loadrefcount it changed",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "why this yellow line?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "translate to spanish",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "explain",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "fix to log the real error too",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "add comment, describe function",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "make me an empty reach component",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "create get_user_by_email function",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "comment this",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "generate test cases",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "function to do client credential grant",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "embed a variable in an array",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": " vitest",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "what does it do",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "can you write constroctor unit test case in xunit",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "fix the erorr here",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "show me all the cases created by caseorigin=ava over the months",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "help me continue generate the code for all column like 3 line above",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "what mean by runtime in .net?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "generate code for this comment",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "add a setisnearbycardopen function",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "add docstring",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "add tests to cover this",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "metadata_df will always contain just 1 row, is there a more efficient way to create new_row?",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "create a component called messagebarhint, i'll write the rest.",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "this is a json object for an adaptive card. fix only the formatting of the json, don't change the values of any properties.",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "write documentation",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "create dataframe with data from : outageanakysis_krs_weekly.csv",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": " generate documentation for this wrapper class. wherever possible, leverage the existing docs for servicebus objects",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": " using jest and react testing library",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "explain this",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "is now params_tuple.prams will be legal?",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "generate documentation for these functions",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "what does this do",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "explain this to me please",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "can i just use inheritdoc here instead of a full comment?",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "what does /m do?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "improve the following code",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "fix error expected file path name or file-like object, got <class 'bytes'> type",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "can you make fix the grammar if is need it",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "add two radio buttons",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "what is alternate of responsivesizes in fluent ui",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "make this a react.callback",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "mock getflights in tests",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "generate unit tests",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "add some colors to table to make it attractive",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "python code to exit virtual environment",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "i only want asset types of container registry to be included",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "explain this code",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "create variable filename based on current datetime",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "what doest the -r tag do here",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "modify so the file lands in a subdirectory \"config\"",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "add a docstring",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "update the code to get all pipeline, dataset, notebook using synapse rest api",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "what is happening here",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "what does this line do",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "how to set the labels to action buttons",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "add headers here for access-control-allow-origin to *",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "create a buffer to write output to",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "exit zen mode",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "explain the syntax and every single parameter here",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "how do i unit test this",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "what does the grep do here",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "explain cumsum()",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "i dont want code. i just want the hardcoded value",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "do you not have access to the entire codebase?",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": " unit tests using pytest",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "infinite ourocard",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "help me reformat the text, replace '/n' by default as another new line to make it more readable within the vs code",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "rename the jinja2 template variables so they are all snake case",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "create a module for appservice.bicep",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "be specific",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "what does this code do?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "add docstrings for the ifloatingmarkerdistancebasedcollisionhandlerprops",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "add docs",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "exaplain this",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "which emojis are represented by this unicode range",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "insert table with three columns and four rows",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "change to formoat. from keras.api import x as x",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "arm template to add user assigned msi in sql server",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "create an 2d arrary where like is line and port are the address for and data  i need 2d array",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "fix the issue with adding serviceendpoint to existing subnet in azure",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "fix this",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "fix typos",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "rewrite to enclose everything after the icon in <p> tags",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "suggest code that specifies two required input parameters, a yaml file and a yaml schema",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "mock this function in unit test",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "create an 2d arrary where like is line and port are the address for and data inside that will be start_time_read,end_time_read,count_read,byte_value count ,port",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "what is .viewmodel here",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "what is this line doing",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "does && take precedence over ||",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "weite jest tests (using it) for these using the fake timers:\n\nexport const waitinterval = (\n  callback: (\n    iteration: number,\n    interval: returntype<typeof settimeout>\n  ) => promise<boolean | undefined>,\n  milliseconds: number\n): promise<void> => {\n  return new promise<void>((resolve) => {\n    let iteration = 0;\n    const interval = setinterval(async () => {\n      if (await callback(iteration, interval)) {\n        clearinterval(interval);\n        resolve();\n      }\n\n      iteration++;\n    }, milliseconds);\n  });\n};\n\n/* async wrapper for settimeout\n *\n * @param milliseconds - the time to wait in milliseconds\n * @returns a promise that resolves when the timer is done\n */\nexport const wait = (milliseconds: number): promise<void> => {\n  return new promise<void>((resolve) => {\n    settimeout(resolve, milliseconds);\n  });\n};",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "fix all the errors",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "create a storybook test for the workflowmanagerrow.tsx component and create tests for the different cases like when disablereactivation is true or false, also cover the scenarios where the row is an active or inactive prompt.",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "write unit tests for the getissuetypesbyprojectids function",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "fix this code for reading inpput as present in input.txt file",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "i will fix the issue with calculating the average of an empty data set failing.",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "call function generatexml on click of this button",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "what are these lines doing",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "modify visual settings so that cameras render the true colors of all objects without any shading or lighting",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "plot average totalrunningtime against inputsize, one figure for each different 'rowgroupsize'",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "generate a new file with only accountid colomn",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "add documentation",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "make this bold and add a new line",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "docstrings",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "write a sample fast api server with pydantic input and output",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "docstring",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "implement the function to return item.deploymentname if item is type of interface microsoft.videoindexer.contracts.aoaideployment otherwise return item.mondelname",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "fix this to use full image",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "highlight only the <event> </event>",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "in react, multiple components are calling an api and at the same time. how to make sure the api is called only once and all components calling it get the data at the same time?",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "why this error",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "write the documentation for this  file",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "add some styles to table. add some javascript code to make",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "what is sqnr?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "write a documentation for this section.",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "can you write unit test case constructor in xunit",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "filter rows where 'gpt4o_ori' is not empty",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "document with docc format",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "write a function check role and count of role by each employee",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "make this div abusolute to the parent div",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "document this function",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "what this setting means?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "edit the main to pass parameters rather than use a parses",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "change to use c++ filesystem module",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "convert the output folder to hex",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "yes, below code is",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "create a readme in markdown that lists things that nodeservice is responsible for vs not responsible for",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "explain this for me please",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "put this in an usememo",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "why in terraform does it complain that this isn't a valid attribute of module storage_account? module storage account has an output of 'name'",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "what is target?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "get matched skill group from pd for each intent groups",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "does this code send request to wordeditorframe?",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "what is the native version of this view",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "document everything following docc format",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "for different values of x ranging from 10, 20, 30, till 100 calculate the profits for\r\n\r\nprofit= +10 --> approved loan/good credit risk: 'y or treating default payment next'= 0, creditworthiness >= x\r\nprofit= -5  --> approved loan/bad credit risk: 'y or treating default payment next'= 0, creditworthiness < x\r\nprofit= -3  --> approved loan/good credit risk: 'y or treating default payment next'= 1, creditworthiness >= x\r\nprofit= 0   --> approved loan/good credit risk: 'y or treating default payment next'= 1, creditworthiness < x",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": " how will this effect the position?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "what is the meaning of this?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "wrtie a if else statement with if then else if and then else here",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "what does this do?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "can you explain this code",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": " add documentation for this api",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "generate comment based off the behavior of the function: returns false if the getter failed else sets the input reference to be the value",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "change mappedrequest to any",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "to create oxygen style documentation for entire file.",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "can you help me understand what this line is dong?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "create disctory array",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "generate test with parameters, from 0 to 100",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "explain the syntax here. tell all the parameters and everything here",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "add docs to isscrolling prop",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "depenedencies without target?",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "add docstring for its properties",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "what version is copilot using?",
    "Intent": "unknown"
  },
  {
    "Location": "inline",
    "Request": "does this line call the command and return execution to the next line in this batch file?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "what is the %ls ?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "generate dosctring",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "documentation",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "filter the supportedentities where isasset is true",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "generate documentation",
    "Intent": "doc"
  },
  {
    "Location": "inline",
    "Request": "what does \"enabletabstermessagepaneattr\" in this codebase",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "add unit tests for the getissuesbysendingapirequest",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "write me a test case for fp_attribution get() function",
    "Intent": "tests"
  },
  {
    "Location": "inline",
    "Request": "what is this?",
    "Intent": "explain"
  },
  {
    "Location": "inline",
    "Request": "fix the code that when the run_percipio_command use this argument it the result of argument.params will be config_pipline",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "can you help with the error",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "this code is failing with below error correct it     testinglibraryelementerror: unable to find an element with the placeholder text of: the description should answer this question: for this customer, how will the requested funds be used?",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "create a json array of 20 random questions. each answer to a question will have 1 to 3 additional questions. this will be a tree of questions with references to it's parent. make the object flat.",
    "Intent": "generate"
  },
  {
    "Location": "inline",
    "Request": "how to fix this line for the incomplete-sanitization issues",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "merge imports",
    "Intent": "edit"
  },
  {
    "Location": "inline",
    "Request": "running the script gives the following error:\r\ncannot convert value \"a\" to type \"system.int32\". error: \"input string was not in a correct format.\"\r\n\r\ncan you please fix it?",
    "Intent": "fix"
  },
  {
    "Location": "inline",
    "Request": "open blade link",
    "Intent": "unknown"
  }
]